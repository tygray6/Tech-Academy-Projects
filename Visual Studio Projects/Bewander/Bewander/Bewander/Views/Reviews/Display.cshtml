@model IEnumerable<Bewander.Models.DisplayReviews>
@{
    ViewBag.Title = "Display";
}

<h2>All Reviews</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>



<!--Reviews-->
<div class="row">
    <div class="col-sm-8 col-sm-offset-2">
        @foreach (var item in Model)
            {
            @Html.HiddenFor(modelItem => item.Review.ReviewID, htmlAttributes: new { @class = "ReviewID" })
            <div class="review-container">
                <div class="row">
                    <div class="col-sm-8 place-details">
                        <h3>@Html.DisplayFor(modelItem => item.Review.Title)</h3>
                        <h3 class="place-name"></h3>
                        <h4 style="margin-top:-1%;">
                            <span class="glyphicon glyphicon-map-marker"></span>@item.City, @item.State @item.Country
                        </h4>
                        <div class="review-body">
                            <p>
                                <span class="fa fa-quote-left" style="padding-right:5%;"></span>
                                @Html.DisplayFor(modelItem => item.Review.Body)
                                <span class="fa fa-quote-right" style="padding-left:5%"></span>
                            </p>
                        </div>
                    </div>
                    <div class="col-sm-4 text-right" id="review-icons">
                        @Stars(item.Review.StarRating)
                        <br />
                        @for (int i = 0; i < item.Review.CostRating; i++)
                        {
                            <i class="fa fa-usd dollar-icon"></i>
                        }
                        <br />
                        <h5>@Html.DisplayFor(modelItem => item.Review.DatePosted)</h5>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@foreach (var item in Model)
{
    <p>@item.Place</p>
    <p>@item.Country</p>
    <p>@item.State</p>
    <p>@item.City</p>
    <p>@item.Review.Title</p>
    <p>@item.Review.Body</p>
    <p>@item.Review.CostRating</p>
    <p>@item.Review.StarRating</p>
    <p>@item.Review.DatePosted</p>
    <p>@item.Review.Local</p>
    <p>@item.Review.SubjectID</p>
    <p>@item.Review.Flag</p>
    <p>@item.FirstName</p>
    <p>@item.LastName</p>
}





<!-- API Script -->
<script>
    // GET: googleID
    function getGoogleID() {
                                var googleID = document.getElementById("GoogleID").value;

                            }

                            var placeSearch, autocomplete;

                            var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

                            function fillInAddress() {
                                // Get the place details from the autocomplete object.
                                var place = autocomplete.getPlace();

                                // Get ID of the chosen place. This value will be saved into the Place Table as PlaceID.
                                var placeID = place.place_id;
                                document.getElementById("placeID").value = placeID;

                                // Get each component of the address from the place details
                                // and fill the corresponding field on the form.
                                for (var i = 0; i < place.address_components.length; i++) {
                                    var addressType = place.address_components[i].types[0];
                                    if (componentForm[addressType]) {
                                        var val = place.address_components[i][componentForm[addressType]];
                                        document.getElementById(addressType).value = val;
                                    }
                                }
                            }


                            // Bias the autocomplete object to the user's geographical location,
                            // as supplied by the browser's 'navigator.geolocation' object.
                            function geolocate() {
                                if (navigator.geolocation) {
                                    navigator.geolocation.getCurrentPosition(function (position) {
                                        var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                                        };
                                    var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                                        });
                                autocomplete.setBounds(circle.getBounds());
                            });
        }
                    }
                    window.onload = getGoogleID();
</script>

<!--  'Review Successfully Submitted' pop-up box -->
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4>Success!</h4>
            </div>
            <div class="modal-body">
                <img src="~/Images/Global/logo.png" style="width:200px" />
                <h4> You sucessfully created a review. Thank you! </h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Code to display the Success popup is inserted here by the controller -->
@Html.Raw(ViewBag.showSuccess1)
@Html.Raw(ViewBag.showSuccess2)

<!-- C# Methods -->
@helper Stars(int? StarRating)
{
switch (StarRating)
{
    case 1:
            <i class="fa fa-star-half-o star-icon"></i>
        break;
    case 3:
            @StarCount(StarRating);
        break;
    case 5:
            @StarCount(StarRating);
        break;
    case 7:
            @StarCount(StarRating);
        break;
    case 9:
            @StarCount(StarRating);
        break;
    default:
        for (int i = 0; i < StarRating; i += 2)
        {
                <i class="fa fa-star star-icon"></i>
        }
        break;
}

}

@helper StarCount(int? StarRating)
{
for (int i = 0; i < StarRating - 1; i += 2)
{
        <i class="fa fa-star star-icon"></i>
}
    <i class="fa fa-star-half-o star-icon"></i>
}   