@model IEnumerable<Bewander.Models.Review>
@{
    ViewBag.Title = "Search";
}

<main id="searchReviewsMain">
    <h2>Search Reviews</h2>

    <input id="pac-input" class="controls" type="text" placeholder="Enter a location" size="50">
    <div id="type-selector" class="controls">
        <input type="radio" name="type" id="changetype-all" checked="checked">
        <label for="changetype-all">All</label>

        <input type="radio" name="type" id="changetype-establishment">
        <label for="changetype-establishment">Establishments</label>

        <input type="radio" name="type" id="changetype-address" hidden>
        <label for="changetype-address" hidden>Addresses</label>

        <input type="radio" name="type" id="changetype-geocode">
        <label for="changetype-geocode">Locations</label>
    </div>

    <div id="map"></div>

    <form method="post" action="~/Reviews/Display" class="form-horizontal" id="searchForm">
        <div class="form-group">
            <div class="col-md-4">
                @Html.Editor("PlaceID", new { htmlAttributes = new { @class = "form-control", name = "PlaceID", id = "placeID", type = "hidden" } })
            </div>
        </div>
    </form>

    <script>
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 40.8688, lng: 151.2195 },
                zoom: 13
            });

            var input = (document.getElementById('pac-input'));

            var types = document.getElementById('type-selector');
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();

                document.getElementById('placeID').value = place.place_id;

                console.log(place.address_components[3]);

                //AJAX request for a summary of reviews for the selected location--display them in the sidebar
                $("#summaries").load("/Reviews/GetReviewSummaries", { placeID: place.place_id });

                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
	                return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                marker.setIcon(({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                      (place.address_components[0] && place.address_components[0].short_name || ''),
                      (place.address_components[1] && place.address_components[1].short_name || ''),
                      (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);

                var searchForm = document.getElementById("searchForm");
                marker.addListener('click', function () {
                    searchForm.submit();
                });

            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function () {
                    autocomplete.setTypes(types);
                });
            }

            setupClickListener('changetype-all', []);
            setupClickListener('changetype-address', ['address']);
            setupClickListener('changetype-establishment', ['establishment']);
            setupClickListener('changetype-geocode', ['geocode']);

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    map.setCenter(pos);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }

            function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                infoWindow.setPosition(pos);
                infoWindow.setContent(browserHasGeolocation ?
                                      'Error: The Geolocation service failed.' :
                                      'Error: Your browser doesn\'t support geolocation.');
            }
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBI5B2snURiIE8VkeuNYL2Es3ZZf8veRf4&libraries=places&callback=initMap"
            async defer></script>
</main>

<article id="searchReviewsSide">
    <div id="searchReviewsImageFrame">
        <img id="searchReviewsImage" src="~/Images/Global/womansitting.jpg"/>
    </div>
    <div id="summaries">
        <!-- The review summaries for the selected place appear here -->
    </div>
</article>




